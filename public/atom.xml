<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>恋恋风辰的个人博客</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.limerence2017.com/"/>
  <updated>2017-08-03T12:55:36.182Z</updated>
  <id>http://www.limerence2017.com/</id>
  
  <author>
    <name>恋恋风辰</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>windows多线程接口介绍和使用</title>
    <link href="http://www.limerence2017.com/2017/08/03/winmulthread/"/>
    <id>http://www.limerence2017.com/2017/08/03/winmulthread/</id>
    <published>2017-08-03T12:47:18.000Z</published>
    <updated>2017-08-03T12:55:36.182Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一windows多线程接口："><a href="#一windows多线程接口：" class="headerlink" title="一windows多线程接口："></a>一<code>windows多线程</code>接口：</h2><h3 id="1-创建线程"><a href="#1-创建线程" class="headerlink" title="1 创建线程"></a>1 创建线程</h3><p><code>CreateThread</code> 与 <code>_beginthreadex</code>都可以实现创建线程，两个函数的参数相同，</p>
 <figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"> HANDLEWINAPICreateThread(</div><div class="line"> LPSECURITY_ATTRIBUTESlpThreadAttributes,</div><div class="line"> SIZE_TdwStackSize,</div><div class="line">  LPTHREAD_START_ROUTINElpStartAddress,</div><div class="line"> LPVOIDlpParameter,</div><div class="line"> DWORDdwCreationFlags,</div><div class="line"> LPDWORDlpThreadId</div><div class="line">);</div></pre></td></tr></table></figure>
<a id="more"></a>  
<p>函数说明：  </p>
<p>第一个参数表示线程内核对象的<code>安全属性</code>，一般传入NULL表示使用默认设置。  </p>
<p>第二个参数表示线程栈空间大小。传入0表示使用默认大小（1MB）。  </p>
<p>第三个参数表示新线程所执行的线程函数地址，多个线程可以使用同一个函数地址。  </p>
<p>第四个参数是传给线程函数的参数。  </p>
<p>第五个参数指定额外的标志来控制线程的创建，为0表示线程创建之后立即就可以进行调度，如果为CREATE_SUSPENDED则表示线程创建后暂停运行，这样它就无法调度，直到调用ResumeThread()。  </p>
<p>第六个参数将返回线程的ID号，传入NULL表示不需要返回该线程ID号。  </p>
<p>函数返回值：</p>
<p>成功返回新线程的句柄，失败返回NULL。   </p>
<p>CreateThread 与 _beginthreadex的区别是_beginthreadex更安全一些，_beginthreadex会为每个线程分配一些独立的数据块，这个独立的数据块用于保存线程独有的信息，因</p>
<p>为在调用C的标准库时，有些函数是返回的是全局信息，这个全局信息容易被多线程干扰，_beginthreadex会规避这个问题。  </p>
<h3 id="2线程等待函数WaitForSingleObject，"><a href="#2线程等待函数WaitForSingleObject，" class="headerlink" title="2线程等待函数WaitForSingleObject，"></a>2线程等待函数WaitForSingleObject，</h3><p><code>WaitForSingleObject</code>这个函数使线程等待某个特定的对象，使线程进入等待状态，直到指定的内核对象被触发。</p>
<p>DWORDWINAPIWaitForSingleObject(<br> HANDLEhHandle,<br> DWORDdwMilliseconds<br>);</p>
<p>函数说明：  </p>
<p>第一个参数为要等待的内核对象。  </p>
<p>第二个参数为最长等待的时间，以毫秒为单位，如传入5000就表示5秒，传入0就立即返回，传入INFINITE表示无限等待。  </p>
<p>因为线程的句柄在线程运行时是未触发的，线程结束运行，句柄处于触发状态。所以可以用WaitForSingleObject()来等待一个线程结束运行。函数返回值：在指定的时间内对象被触发，函数返回WAIT_OBJECT_0。超过最长等待时间对象仍未被触发返回WAIT_TIMEOUT。传入参数有错误将返回WAIT_FAILED  </p>
<p>具体的使用</p>
<p>可以从我自己做的服务器里截取一部分代码看看</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">void</span> BaseThread::startup(UInt32 stackSize)</div><div class="line">&#123;</div><div class="line">    assert(m_nId == <span class="number">0</span>);</div><div class="line">    <span class="meta">#<span class="meta-keyword">if</span> defined _WIN32</span></div><div class="line">    m_hThread =(HANDLE) _beginthreadex(<span class="literal">NULL</span>,<span class="number">0</span>,threadFunc, <span class="keyword">this</span>, <span class="number">0</span>, &amp;m_nId);</div><div class="line">    <span class="comment">//cout &lt;&lt; this &lt;&lt;endl;</span></div><div class="line">     ::SetThreadPriority(::GetCurrentThread(), <span class="number">2</span>);</div><div class="line">    <span class="comment">//让线程跑起来后再退出函数</span></div><div class="line">    <span class="comment">// Sleep(1000);</span></div><div class="line">    </div><div class="line">    <span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">void</span> BaseThread::join()</div><div class="line">&#123;</div><div class="line">    <span class="meta">#<span class="meta-keyword">if</span> defined _WIN32</span></div><div class="line">     DWORD exitCode;</div><div class="line">     <span class="keyword">while</span>(<span class="number">1</span>)</div><div class="line">     &#123;</div><div class="line">        <span class="keyword">if</span>(GetExitCodeThread(m_hThread, &amp;exitCode) != <span class="number">0</span>)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">if</span>(exitCode != STILL_ACTIVE)</div><div class="line">            &#123;</div><div class="line">                <span class="keyword">break</span>;</div><div class="line"></div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span></div><div class="line">            &#123;</div><div class="line">                <span class="comment">// wait之前， 需要唤起线程， 防止线程处于挂起状态导致死等</span></div><div class="line">                ResumeThread(m_hThread);</div><div class="line">                WaitForSingleObject(m_hThread, INFINITE);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span></div><div class="line">        &#123;</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line">     &#125;</div><div class="line">    </div><div class="line">     CloseHandle(m_hThread);</div><div class="line">    <span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line"></div><div class="line">     m_nId = <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;一windows多线程接口：&quot;&gt;&lt;a href=&quot;#一windows多线程接口：&quot; class=&quot;headerlink&quot; title=&quot;一windows多线程接口：&quot;&gt;&lt;/a&gt;一&lt;code&gt;windows多线程&lt;/code&gt;接口：&lt;/h2&gt;&lt;h3 id=&quot;1-创建线程&quot;&gt;&lt;a href=&quot;#1-创建线程&quot; class=&quot;headerlink&quot; title=&quot;1 创建线程&quot;&gt;&lt;/a&gt;1 创建线程&lt;/h3&gt;&lt;p&gt;&lt;code&gt;CreateThread&lt;/code&gt; 与 &lt;code&gt;_beginthreadex&lt;/code&gt;都可以实现创建线程，两个函数的参数相同，&lt;/p&gt;
 &lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt; HANDLEWINAPICreateThread(&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; LPSECURITY_ATTRIBUTESlpThreadAttributes,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; SIZE_TdwStackSize,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  LPTHREAD_START_ROUTINElpStartAddress,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; LPVOIDlpParameter,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; DWORDdwCreationFlags,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; LPDWORDlpThreadId&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;);&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="技术开发" scheme="http://www.limerence2017.com/categories/tech/"/>
    
    
      <category term="C++" scheme="http://www.limerence2017.com/tags/C/"/>
    
      <category term="Windows环境编程" scheme="http://www.limerence2017.com/tags/Windows%E7%8E%AF%E5%A2%83%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>Windows互斥锁demo和分析</title>
    <link href="http://www.limerence2017.com/2017/08/03/winmutexdemo/"/>
    <id>http://www.limerence2017.com/2017/08/03/winmutexdemo/</id>
    <published>2017-08-03T12:36:08.000Z</published>
    <updated>2017-08-03T12:43:49.900Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一：windows创建锁接口"><a href="#一：windows创建锁接口" class="headerlink" title="一：windows创建锁接口"></a>一：windows创建锁接口</h2><p>创建互斥锁的方法是调用函数<code>CreateMutex</code><br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function">HANDLE <span class="title">CreateMutex</span><span class="params">(</span></span></div><div class="line"><span class="function"><span class="params">LPSECURITY_ATTRIBUTESlpMutexAttributes, <span class="comment">// 指向安全属性的指针</span></span></span></div><div class="line"><span class="function"><span class="params">BOOLbInitialOwner, <span class="comment">// 初始化互斥对象的所有者</span></span></span></div><div class="line"><span class="function"><span class="params">LPCTSTRlpName <span class="comment">// 指向互斥对象名的指针</span></span></span></div><div class="line"><span class="function"><span class="params">)</span></span>;</div></pre></td></tr></table></figure></p>
<p>第一个参数是一个指向<code>SECURITY_ATTRIBUTES</code>结构体的指针，一般的情况下，可以是nullptr。</p>
<p>第二个参数类型为BOOL，表示<code>互斥锁创建出来后是否被当前线程持有</code>。</p>
<p>第三个参数类型为字符串（const TCHAR*），是这个<code>互斥锁的名字</code>，如果是nullptr，则互斥锁是匿名的。</p>
<p>例子：</p>
<p><code>HANDLE hMutex = CreateMutex(nullptr, FALSE, nullptr);</code><br><a id="more"></a>  </p>
<h2 id="二：windows持有锁接口："><a href="#二：windows持有锁接口：" class="headerlink" title="二：windows持有锁接口："></a>二：windows持有锁接口：</h2><p>DWORD <code>WaitForSingleObject</code>(</p>
<p>HANDLE hHandle,<br>DWORD dwMilliseconds<br>);</p>
<p>这个函数的作用比较多。这里只介绍第一个参数为互斥锁句柄时的作用。</p>
<p>它的作用是等待，直到一定时间之后，或者，其他线程均不持有hMutex。第二个参数是等待的时间（单位：毫秒），如果该参数为INFINITE，则该函数会一直等待下去。</p>
<h2 id="三：释放锁"><a href="#三：释放锁" class="headerlink" title="三：释放锁"></a>三：释放锁</h2><p>BOOL WINAPI <code>ReleaseMutex</code>(<br>HANDLE hMutex<br>);</p>
<h2 id="四：销毁"><a href="#四：销毁" class="headerlink" title="四：销毁"></a>四：销毁</h2><p>BOOL <code>CloseHandle</code>(<br>HANDLE hObject<br>);</p>
<p>下面是网上的一个案例，根据我自己做服务器的需求，模仿者写了一个：</p>
<p>‘’’ cpp<br>//各种类型的锁的基类<br>class BaseLock<br>{<br>public:<br>    BaseLock(){}<br>    virtual ~BaseLock(){}<br>    virtual void lock() const = 0 ;<br>    virtual void unlock() const = 0 ;<br>};</p>
<p>//互斥锁继承基类<br>class Mutex :public BaseLock<br>{<br>public:<br>    Mutex();<br>    ~Mutex();<br>    virtual void lock() const;<br>    virtual void unlock() const;<br>private:</p>
<p>#if defined _WIN32<br>    HANDLE m_hMutex;</p>
<p>#endif<br>};</p>
<p>//互斥锁实现文件：</p>
<p>//在构造函数里创建锁<br>Mutex::Mutex()<br>{</p>
<pre><code>#if defined _WIN32
    m_hMutex = ::CreateMutex(NULL, FALSE, NULL);
#endif
</code></pre><p>}</p>
<p>//析构函数里销毁锁<br>Mutex::~ Mutex()<br>{</p>
<pre><code>#if defined _WIN32
    ::CloseHandle(m_hMutex);
#endif
</code></pre><p>}</p>
<p>//互斥锁上锁<br>void Mutex::lock() const<br>{</p>
<pre><code>#if defined _WIN32
  DWORD d = WaitForSingleObject(m_hMutex, INFINITE);
#endif
</code></pre><p>}</p>
<p>//互斥锁解锁<br>void Mutex::unlock() const<br>{</p>
<pre><code>#if defined _WIN32
  ::ReleaseMutex(m_hMutex);
#endif
</code></pre><p>}</p>
<p>class CLock<br>{<br>public:<br>    CLock(const BaseLock &amp; baseLock):m_cBaseLock(baseLock){<br>        //构造函数里通过基类锁调用加锁函数(多态)<br>        m_cBaseLock.lock();<br>    }<br>    ~CLock(){<br>        //析构函数先解锁<br>        m_cBaseLock.unlock();<br>    }<br>private:<br>    //常引用变量，需要在初始化列表初始<br>    //多态机制<br>    const BaseLock&amp; m_cBaseLock;<br>};<br>‘’’</p>
<p>CLock是留给外界使用的接口类，可以实现自动加锁和解锁。构造函数传入不同类型的锁，目前只实现了互斥锁，通过基类类型的引用成员可以实现多态调用不同的lock和unlock，而CLock析构函数因为会调用基类的unlock，从而实现不同类型的解锁。那么读者可能会有疑问互斥锁什么时候会销毁？互斥锁的销毁写在互斥锁类的析构函数里，当调用互斥锁的析构函数就会自动销毁这把锁了。什么时候调用互斥锁的析构函数呢？之前有介绍过，析构函数的调用顺序，先析构子类对象，然后析构子类对象中包含的其他类型的对象，最后析构基类对象，所以整个流程是先调用Mutex的构造函数，将Mutex构造的对象传入CLock的构造函数，这样实现自动加锁，当CLock析构的时候先析构CLock对象，之后析构CLock类里的BaseLock对象，因为是多态，会自动根据虚析构函数调用子类也就是MutexLock的析构函数，完成销毁锁的操作。</p>
<p>下面是我服务器中的一段代码截取，算是这个锁的示例</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">void</span> NetWorker::pushNodeInStream(TcpHandler * tcpHandler)</div><div class="line">&#123;</div><div class="line">        <span class="comment">//加锁处理消息加入到instream里</span></div><div class="line">        Mutex mutexlock;</div><div class="line">        <span class="function">CLock <span class="title">mylock</span><span class="params">(mutexlock)</span></span>;    </div><div class="line">        <span class="built_in">list</span>&lt;MsgNode *&gt; * msgList = tcpHandler-&gt;getListMsgs();</div><div class="line"></div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>因为函数<code>}</code>会释放局部变量，那么就会调用CLock析构函数，接着调用Mutex析构函数。依次完成解锁和销毁锁的操作。我的服务器还在制作当中，基本框架制作完毕会做一些服务器设计的研究。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;一：windows创建锁接口&quot;&gt;&lt;a href=&quot;#一：windows创建锁接口&quot; class=&quot;headerlink&quot; title=&quot;一：windows创建锁接口&quot;&gt;&lt;/a&gt;一：windows创建锁接口&lt;/h2&gt;&lt;p&gt;创建互斥锁的方法是调用函数&lt;code&gt;CreateMutex&lt;/code&gt;&lt;br&gt;&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;HANDLE &lt;span class=&quot;title&quot;&gt;CreateMutex&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;params&quot;&gt;LPSECURITY_ATTRIBUTESlpMutexAttributes, &lt;span class=&quot;comment&quot;&gt;// 指向安全属性的指针&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;params&quot;&gt;BOOLbInitialOwner, &lt;span class=&quot;comment&quot;&gt;// 初始化互斥对象的所有者&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;params&quot;&gt;LPCTSTRlpName &lt;span class=&quot;comment&quot;&gt;// 指向互斥对象名的指针&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;params&quot;&gt;)&lt;/span&gt;&lt;/span&gt;;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;第一个参数是一个指向&lt;code&gt;SECURITY_ATTRIBUTES&lt;/code&gt;结构体的指针，一般的情况下，可以是nullptr。&lt;/p&gt;
&lt;p&gt;第二个参数类型为BOOL，表示&lt;code&gt;互斥锁创建出来后是否被当前线程持有&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;第三个参数类型为字符串（const TCHAR*），是这个&lt;code&gt;互斥锁的名字&lt;/code&gt;，如果是nullptr，则互斥锁是匿名的。&lt;/p&gt;
&lt;p&gt;例子：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;HANDLE hMutex = CreateMutex(nullptr, FALSE, nullptr);&lt;/code&gt;&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="技术开发" scheme="http://www.limerence2017.com/categories/tech/"/>
    
    
      <category term="C++" scheme="http://www.limerence2017.com/tags/C/"/>
    
      <category term="Windows环境编程" scheme="http://www.limerence2017.com/tags/Windows%E7%8E%AF%E5%A2%83%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>windows环境利用semophore机制进行线程同步</title>
    <link href="http://www.limerence2017.com/2017/08/03/winsemphore/"/>
    <id>http://www.limerence2017.com/2017/08/03/winsemphore/</id>
    <published>2017-08-03T10:23:28.000Z</published>
    <updated>2017-08-03T10:59:17.663Z</updated>
    
    <content type="html"><![CDATA[<p><code>semophore</code>是信号量的意思，常用于<code>PV操作</code>，所谓PV操作就是pend(等待，直到有资源可用，并且消耗资源)V就是释放资源。<br><code>semophore和mutex区别</code>，<code>mutex</code>本意为互斥，用于线程独占资源，常用于临界区访问锁住mutex，当线程A对mutex加锁后，其他线程不能反问临界资源，也不能加锁，直到线程A解锁，其他线程才能访问。而semophore则可以在不同的线程之间进行pv操作，semophore可以设置最多有多少个<code>信号量</code>，以及初始的信号量，当调用<code>V操作</code>的时候信号量数量增加一个，调用<code>P操作</code>时候信号量数量减少一个，但是不能超过最多的信号量。信号量是一个非负数。<a id="more"></a><br>打个比方，一辆车只有一把钥匙，mutex就是这把钥匙，谁有这把钥匙才能开车，开完车把钥匙归还或者给下一个等待的人。现在有一辆公交车，最多容纳二十个人，二十就是信号量的最大值，每个人就是一个信号量，当人满的时候其他的人就不能上车，直到有人下车，其他人才能上车。  </p>
<p><code>semophore主要适用于windows环境下的同步</code>  </p>
<h2 id="下面介绍下semophore"><a href="#下面介绍下semophore" class="headerlink" title="下面介绍下semophore"></a>下面介绍下semophore</h2><h3 id="1-创建信号量"><a href="#1-创建信号量" class="headerlink" title="1 创建信号量"></a>1 <code>创建信号量</code></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function">HANDLE WINAPI <span class="title">CreateSemaphore</span><span class="params">(              </span></span></div><div class="line"><span class="function"><span class="params">  _In_opt_  LPSECURITY_ATTRIBUTES lpSemaphoreAttributes </span></span></div><div class="line"><span class="function"><span class="params">  _In_      LONG lInitialCount, </span></span></div><div class="line"><span class="function"><span class="params">  _In_      LONG lMaximumCount, </span></span></div><div class="line"><span class="function"><span class="params">  _In_opt_  LPCTSTR lpName </span></span></div><div class="line"><span class="function"><span class="params">)</span></span>; </div><div class="line">第一个参数：安全属性，如果为<span class="literal">NULL</span>则是默认安全属性 </div><div class="line">第二个参数：信号量的初始值，要&gt;=<span class="number">0</span>且&lt;=第三个参数 </div><div class="line">第三个参数：信号量的最大值 </div><div class="line">第四个参数：信号量的名称 </div><div class="line">返回值：指向信号量的句柄，如果创建的信号量和已有的信号量重名，那么返回已经存在的信号量句柄</div></pre></td></tr></table></figure>
<h3 id="2打开其他进程中的信号量"><a href="#2打开其他进程中的信号量" class="headerlink" title="2打开其他进程中的信号量"></a>2<code>打开其他进程中的信号量</code></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function">HANDLE WINAPI <span class="title">OpenSemaphore</span><span class="params">(  </span></span></div><div class="line"><span class="function"><span class="params">  _In_  DWORD dwDesiredAccess,  </span></span></div><div class="line"><span class="function"><span class="params">  _In_  BOOL bInheritHandle,  </span></span></div><div class="line"><span class="function"><span class="params">  _In_  LPCTSTR lpName  </span></span></div><div class="line"><span class="function"><span class="params">)</span></span>;</div></pre></td></tr></table></figure>
<p><code>dwDesiredAccess</code>：指定想要的访问权限，SEMAPHORE_ALL_ACCESS 请求对事件对象的完全访问，SEMAPHORE_MODIFY_STATE 修改状态权限，使用ReleaseSemaphore函数需要该权限；<br><code>bInheritHandle</code>：是否希望子进程继承信号量对象的句柄，一般设置为false；<br><code>lpName</code>：要打开的信号量对象的名称；  </p>
<h3 id="3等待信号量"><a href="#3等待信号量" class="headerlink" title="3等待信号量"></a>3<code>等待信号量</code></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function">DWORD WINAPI <span class="title">WaitForSingleObject</span><span class="params">(  </span></span></div><div class="line"><span class="function"><span class="params">  _In_  HANDLE hHandle,  </span></span></div><div class="line"><span class="function"><span class="params">  _In_  DWORD dwMilliseconds  </span></span></div><div class="line"><span class="function"><span class="params">)</span></span>;</div></pre></td></tr></table></figure>
<p><code>hHandle</code>：指向内核对象的句柄；<br><code>dwMilliseconds</code>：线程最大等待多长时间，直到该对象被触发。经常使用INFINITE，表示阻塞等待。<br><code>WaitForSingleObject</code>为等待资源的函数，等待内核对象被触发的通用函数，在这里用于等待信号量，我们之前说过信号量的资源数是非负整数，当信号量数量大于0，那么该函数会将信号量-1，并且返回，线程继续执行后续操作。如果信号量资源数为0，那么该线程处于等待状态，阻塞等待信号量被激活。  </p>
<h3 id="4-释放信号量"><a href="#4-释放信号量" class="headerlink" title="4 释放信号量"></a>4 <code>释放信号量</code></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function">BOOL WINAPI <span class="title">ReleaseSemaphore</span><span class="params">(  </span></span></div><div class="line"><span class="function"><span class="params">  _In_       HANDLE hSemaphore,  </span></span></div><div class="line"><span class="function"><span class="params">  _In_       LONG lReleaseCount,  </span></span></div><div class="line"><span class="function"><span class="params">  _Out_opt_  LPLONG lpPreviousCount  </span></span></div><div class="line"><span class="function"><span class="params">)</span></span>;</div></pre></td></tr></table></figure>
<p><code>hSemaphore</code>：信号量内核对象的句柄；<br>lReleaseCount：释放自己使用的资源数目，加到信号量的当前资源计数上，通常会传1，当然是根据线程使用的资源数目而定。<br>lpPreviousCount：返回当前资源计数的原始值，应用程序很少会用到这个值，所以一般置为NULL；<br>当一个线程使用完信号量对象控制的有限资源后，应该调用ReleaseSemaphore，释放使用的资源，使信号量对象的当前资源计数得到恢复。</p>
<h3 id="5关闭内核对象的句柄"><a href="#5关闭内核对象的句柄" class="headerlink" title="5关闭内核对象的句柄"></a>5<code>关闭内核对象的句柄</code></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function">BOOL WINAPI <span class="title">CloseHandle</span><span class="params">(  </span></span></div><div class="line"><span class="function"><span class="params">  _In_  HANDLE hObject  </span></span></div><div class="line"><span class="function"><span class="params">)</span></span>;</div></pre></td></tr></table></figure>
<p><code>hObject</code>：指向内核对象的句柄和其他内核对象一样，无论以什么方式创建内核对象，我们都必须通过调用CloseHandle向系统表明结束使用内核对象。如果传入的句柄有效，系统将获得内核对象数据结构的地址，并将结构中的使用计数减1，如果使用计数0，就会将内核对象销毁，从内存空间中擦除。<br>下面写一个例子，三个线程，分别为如数1,2,3，要求每个线程输出10此，以1,2,3分别输出。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//先定义三个信号量句柄：</span></div><div class="line"></div><div class="line">HANDLE hsem1,hsem2,hsem3;</div><div class="line"> </div><div class="line"></div><div class="line"><span class="comment">//线程回调函数：</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">unsigned</span> __<span class="function">stdcall <span class="title">threadFunA</span><span class="params">(<span class="keyword">void</span> *)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)&#123;</div><div class="line">        WaitForSingleObject(hsem1, INFINITE);<span class="comment">//等待信号量</span></div><div class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"first thread function"</span>&lt;&lt;<span class="built_in">endl</span>;</div><div class="line">        ReleaseSemaphore(hsem2, <span class="number">1</span>, <span class="literal">NULL</span>);<span class="comment">//释放信号量2</span></div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//该函数内部调用等待第一个信号量，如果获得资源，则打印日志，并且释放资源2</span></div><div class="line"></div><div class="line"><span class="comment">//同样的道理，完成第二个，第三个线程回调函数</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">unsigned</span> __<span class="function">stdcall <span class="title">threadFunB</span><span class="params">(<span class="keyword">void</span> *)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)&#123;</div><div class="line">        WaitForSingleObject(hsem2, INFINITE);<span class="comment">//等待信号量</span></div><div class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"second thread function"</span>&lt;&lt;<span class="built_in">endl</span>;</div><div class="line">        ReleaseSemaphore(hsem3, <span class="number">1</span>, <span class="literal">NULL</span>);<span class="comment">//释放信号量3</span></div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">2</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"> <span class="keyword">unsigned</span>  __<span class="function">stdcall <span class="title">threadFunC</span><span class="params">(<span class="keyword">void</span> *)</span></span></div><div class="line"><span class="function"> </span>&#123;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)&#123;</div><div class="line">        WaitForSingleObject(hsem3, INFINITE);<span class="comment">//等待信号量</span></div><div class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"third thread function"</span>&lt;&lt;<span class="built_in">endl</span>;</div><div class="line">        ReleaseSemaphore(hsem1, <span class="number">1</span>, <span class="literal">NULL</span>);<span class="comment">//释放信号量</span></div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">3</span>;</div><div class="line"> &#125;</div><div class="line"></div><div class="line"><span class="comment">//接下来在主函数创建三个线程，并且初始化第一个信号量的初始资源数为1，</span></div><div class="line"></div><div class="line"><span class="comment">//第二个和第三个信号量初始资源数都是0，他们的最大资源数为1.</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">//创建信号量</span></div><div class="line">    hsem1 = CreateSemaphore(<span class="literal">NULL</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="literal">NULL</span>);</div><div class="line">    hsem2 = CreateSemaphore(<span class="literal">NULL</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="literal">NULL</span>);</div><div class="line">    hsem3 = CreateSemaphore(<span class="literal">NULL</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="literal">NULL</span>);</div><div class="line"></div><div class="line">    HANDLE hth1, hth2, hth3;</div><div class="line"> </div><div class="line">    <span class="comment">//创建线程</span></div><div class="line">    hth1 = (HANDLE)_beginthreadex(<span class="literal">NULL</span>, <span class="number">0</span>, threadFunA, <span class="literal">NULL</span>, <span class="number">0</span>, <span class="literal">NULL</span>);</div><div class="line">    hth2 = (HANDLE)_beginthreadex(<span class="literal">NULL</span>, <span class="number">0</span>, threadFunB, <span class="literal">NULL</span>, <span class="number">0</span>, <span class="literal">NULL</span>);</div><div class="line">    hth3 = (HANDLE)_beginthreadex(<span class="literal">NULL</span>, <span class="number">0</span>, threadFunC, <span class="literal">NULL</span>, <span class="number">0</span>, <span class="literal">NULL</span>);</div><div class="line"> </div><div class="line"></div><div class="line"><span class="comment">//当线程调用完回调函数才能让主线程退出，linux系统对应的api为pthread_join()，</span></div><div class="line"></div><div class="line"><span class="comment">//我们这里windows api为 WaitForSingleObject</span></div><div class="line"></div><div class="line"><span class="comment">//等待子线程结束</span></div><div class="line">    WaitForSingleObject(hth1, INFINITE);</div><div class="line">    WaitForSingleObject(hth2, INFINITE);</div><div class="line">    WaitForSingleObject(hth3, INFINITE);</div><div class="line"> </div><div class="line"></div><div class="line"> <span class="comment">//最后释放线程的句柄和信号量的句柄</span></div><div class="line"></div><div class="line"></div><div class="line"> <span class="comment">//一定要记得关闭线程句柄</span></div><div class="line">    CloseHandle(hth1);</div><div class="line">    CloseHandle(hth2);</div><div class="line">    CloseHandle(hth3);</div><div class="line">    CloseHandle(hsem1);</div><div class="line">    CloseHandle(hsem2);</div><div class="line">    CloseHandle(hsem3);</div></pre></td></tr></table></figure></p>
<p>打印输出如下：<br><img src="/2017/08/03/winsemphore/1.png" alt="1"><br>结果显示三个线程是按顺序输出的。所以信号量常用来同步线程。<br>源代码下载地址：<a href="http://download.csdn.net/detail/secondtonone1/9654799" target="_blank" rel="external">semophore测试</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;code&gt;semophore&lt;/code&gt;是信号量的意思，常用于&lt;code&gt;PV操作&lt;/code&gt;，所谓PV操作就是pend(等待，直到有资源可用，并且消耗资源)V就是释放资源。&lt;br&gt;&lt;code&gt;semophore和mutex区别&lt;/code&gt;，&lt;code&gt;mutex&lt;/code&gt;本意为互斥，用于线程独占资源，常用于临界区访问锁住mutex，当线程A对mutex加锁后，其他线程不能反问临界资源，也不能加锁，直到线程A解锁，其他线程才能访问。而semophore则可以在不同的线程之间进行pv操作，semophore可以设置最多有多少个&lt;code&gt;信号量&lt;/code&gt;，以及初始的信号量，当调用&lt;code&gt;V操作&lt;/code&gt;的时候信号量数量增加一个，调用&lt;code&gt;P操作&lt;/code&gt;时候信号量数量减少一个，但是不能超过最多的信号量。信号量是一个非负数。&lt;/p&gt;
    
    </summary>
    
      <category term="技术开发" scheme="http://www.limerence2017.com/categories/tech/"/>
    
    
      <category term="C++" scheme="http://www.limerence2017.com/tags/C/"/>
    
      <category term="Windows环境编程" scheme="http://www.limerence2017.com/tags/Windows%E7%8E%AF%E5%A2%83%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>windows环境下封装条件wait和signal</title>
    <link href="http://www.limerence2017.com/2017/08/03/winsignal/"/>
    <id>http://www.limerence2017.com/2017/08/03/winsignal/</id>
    <published>2017-08-03T09:46:34.000Z</published>
    <updated>2017-08-03T10:57:42.799Z</updated>
    
    <content type="html"><![CDATA[<p>linux 环境有提供好的<code>pthread_cond_wait()</code> 和 <code>phread_signal()</code>、<code>pthread_broadcast()</code>windows需要自己封装，利用<code>semophore</code>控制线程等待和释放，先简单谈一下设计好后api该如何使用。假设我们封装好条件变量等待函数名字叫做<code>wait(Mutex&amp; mutex)</code>，Mutex是之前我们封装的条件变量，文章最下边会给出这些文件的下载地址，在这里读者当做linux 的mutex即可。我们封装的释放函数为<code>signal()</code>,广播函数为<code>broadcast</code>。<br><a id="more"></a><br>判断等待条件变量和逻辑处理如下：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">Lock(mutex);</div><div class="line"></div><div class="line"><span class="keyword">while</span>(条件不满足)</div><div class="line"></div><div class="line">&#123;</div><div class="line"></div><div class="line"> 　  wait(mutex);</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line">todo...;</div><div class="line"></div><div class="line">UnLock(mutex);</div></pre></td></tr></table></figure></p>
<p>激活条件变量如下：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">Lock(mutex);</div><div class="line"></div><div class="line">　　todo ...;　</div><div class="line"></div><div class="line">　　<span class="keyword">if</span>(条件满足)</div><div class="line"></div><div class="line">　　&#123;</div><div class="line"></div><div class="line">　　　　signal();/broadcast();</div><div class="line"></div><div class="line">　　&#125;　</div><div class="line"></div><div class="line">signal();</div><div class="line"></div><div class="line">UnLock(mutex);</div></pre></td></tr></table></figure></p>
<p>Condition 是我们封装的条件变量类这是封装好api后调用规则，那么先考虑wait内部的基本形式<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">void</span> Condition::wait(Mutex &amp;mutex)</div><div class="line"></div><div class="line">&#123;</div><div class="line"></div><div class="line">　　<span class="comment">//1 Condition 类中表示阻塞线程数　</span></div><div class="line"></div><div class="line">　　mblocked ++;</div><div class="line"></div><div class="line">　　<span class="comment">//2 解锁，释放互斥量</span></div><div class="line"></div><div class="line">　　UnLock(mutex);</div><div class="line"></div><div class="line">　　<span class="comment">//3 阻塞等待 mQueue为信号量</span></div><div class="line"></div><div class="line">　  res = WaitForSingleObject(<span class="keyword">reinterpret_cast</span>&lt;HANDLE&gt;(mQueue), INFINITE);</div><div class="line"></div><div class="line">　  <span class="comment">//4 做一些判断和逻辑处理</span></div><div class="line"></div><div class="line">　　<span class="comment">//5　加锁</span></div><div class="line"></div><div class="line"> 　Lock(mutex);</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>wait内部记录一个阻塞的线程数mblocked，mblocked 是我们封装Condition类的成员变量，<br>然后释放外部的互斥量，然后调用阻塞函数，等待signal唤醒。<br>当WaitForSingleObject获取信号后会继续执行，做一些逻辑判断，最后将mutex锁住。<br>这里用到的mQueue是一个信号量，用信号量可以接受多个唤醒和控制线程唤醒数量。<br>下面是条件变量释放的函数，我们先做只是放一个条件变量的api<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">void</span> Condition::signal()</div><div class="line"></div><div class="line">&#123;</div><div class="line"></div><div class="line">　　<span class="comment">//1阻塞的线程减少</span></div><div class="line"></div><div class="line">　　mblocked --;</div><div class="line"></div><div class="line">　　<span class="comment">//2将激活的信号个数设置为1</span></div><div class="line"></div><div class="line">　　signals = <span class="number">1</span>;</div><div class="line"></div><div class="line">　　<span class="comment">//3</span></div><div class="line"></div><div class="line">　　<span class="keyword">if</span> (signals)</div><div class="line"></div><div class="line">　　&#123;</div><div class="line"></div><div class="line">　　　　<span class="comment">//释放信号量</span></div><div class="line">　　　　res = ReleaseSemaphore(<span class="keyword">reinterpret_cast</span>&lt;HANDLE&gt;(mQueue), signals, <span class="number">0</span>);</div><div class="line">　　　　ASSERT(res);</div><div class="line">　　&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>先不要着急往下写，考虑下这么做真的合适么？<br>首先之前设计过外部调用<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span>(条件满足)</div><div class="line"></div><div class="line">　　&#123;</div><div class="line"></div><div class="line">　　　　signal();/broadcast();</div><div class="line"></div><div class="line">　　&#125;</div></pre></td></tr></table></figure></p>
<p>这个只要条件满足就可以激活，所以我们只用mblocked表示阻塞线程数是不够的，当信号量被激活很多没有被消耗的情况下就需要统计当前可用的资源数，那么就在Condition类添加mWait表示当前可用的信号量个数。除此之外，考虑这样一种情况，当条件不满足的时候 线程A调用void wait(Mutex &amp;mutex)函数，wait函数先解锁再阻塞，对应wait中第2,3步骤。而另一个线程B当条件满足时调用 signal函数激活之前阻塞的线程A，对应signal函数中第3步。原阻塞线程A因为捕获到信号量，所以一次走到wait中第4、5步。由于第4和第5步之间没有加锁保护，所以这一阶段用到的类的成员变量都是不安全的。所以在第3和第4之间加一个互斥锁，第5步之后释放这个互斥锁。同样的道理，为了避免此时signal内部调用类的成员变量造成数据不一致所以signal内部也需要加锁，在signal内部第1步之前加锁，第3步之后解锁，或者第3步之前解锁都可以。我觉得在第三步之前释放会好一些，在释放信号量之前解锁，避免死锁。所以添加一个成员变量mMutex用于部分代码互斥。<br>那么改良后我们的函数如下：  </p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">void</span></div><div class="line">Condition::wait(Mutex&amp; mutex)</div><div class="line">&#123;</div><div class="line">　　<span class="meta">#<span class="meta-keyword">ifndef</span> WIN32</span></div><div class="line">    　　<span class="keyword">int</span> ret = pthread_cond_wait(&amp;mId, mutex.getId());</div><div class="line">    　　ASSERT(ret == <span class="number">0</span>);</div><div class="line">　　<span class="meta">#<span class="meta-keyword">else</span></span></div><div class="line">    <span class="comment">//1</span></div><div class="line">    mBlocked++;&lt;br&gt;        <span class="comment">//2</span></div><div class="line">    　　mutex.unlock();</div><div class="line"> </div><div class="line">    　　<span class="keyword">int</span> res = <span class="number">0</span>;&lt;br&gt;　　　　 <span class="comment">//3</span></div><div class="line">   　　 res = WaitForSingleObject(<span class="keyword">reinterpret_cast</span>&lt;HANDLE&gt;(mQueue), INFINITE);</div><div class="line">    　　ASSERT(res == WAIT_OBJECT_0);</div><div class="line">     </div><div class="line">    <span class="comment">//用于暂时存储mWaiting的数值</span></div><div class="line">   　　  <span class="keyword">unsigned</span> wasWaiting = <span class="number">0</span>;</div><div class="line">   　　 <span class="comment">//4</span></div><div class="line">    　　res = WaitForSingleObject(<span class="keyword">reinterpret_cast</span>&lt;HANDLE&gt;(mMutex), INFINITE);</div><div class="line">    　　ASSERT(res == WAIT_OBJECT_0);</div><div class="line">    　　wasWaiting = mWaiting;</div><div class="line">   　　 <span class="comment">//5</span></div><div class="line">   　　 res = ReleaseMutex(<span class="keyword">reinterpret_cast</span>&lt;HANDLE&gt;(mMutex));</div><div class="line">    　　ASSERT(res);</div><div class="line">　　　　<span class="comment">//6</span></div><div class="line">  　　　mutex.lock();</div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>步骤也做了相应的调整。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">void</span></div><div class="line">Condition::signal ()</div><div class="line">&#123;</div><div class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> WIN32</span></div><div class="line">    <span class="keyword">int</span> ret = pthread_cond_signal(&amp;mId);</div><div class="line">    ASSERT(ret == <span class="number">0</span>);</div><div class="line"><span class="meta">#<span class="meta-keyword">else</span></span></div><div class="line">    <span class="keyword">unsigned</span> signals = <span class="number">0</span>;</div><div class="line"></div><div class="line">    <span class="keyword">int</span> res = <span class="number">0</span>;</div><div class="line">　　<span class="comment">//1</span></div><div class="line">    res = WaitForSingleObject(<span class="keyword">reinterpret_cast</span>&lt;HANDLE&gt;(mMutex), INFINITE);</div><div class="line">    ASSERT(res == WAIT_OBJECT_0);</div><div class="line">　　<span class="comment">//2</span></div><div class="line">    <span class="keyword">if</span> (mWaiting != <span class="number">0</span>) </div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span> (mBlocked == <span class="number">0</span>)</div><div class="line">        &#123;</div><div class="line">            res = ReleaseMutex(<span class="keyword">reinterpret_cast</span>&lt;HANDLE&gt;(mMutex));</div><div class="line">            ASSERT(res);</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        ++mWaiting;</div><div class="line">        --mBlocked;</div><div class="line">        signals = <span class="number">1</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span></div><div class="line">    &#123;</div><div class="line">        signals = mWaiting = <span class="number">1</span>;</div><div class="line">        --mBlocked;</div><div class="line">            </div><div class="line">    &#125;</div><div class="line">　　<span class="comment">//3</span></div><div class="line">    res = ReleaseMutex(<span class="keyword">reinterpret_cast</span>&lt;HANDLE&gt;(mMutex));</div><div class="line">    ASSERT(res);</div><div class="line">　　<span class="comment">//4</span></div><div class="line">    <span class="keyword">if</span> (signals)</div><div class="line">    &#123;</div><div class="line">        res = ReleaseSemaphore(<span class="keyword">reinterpret_cast</span>&lt;HANDLE&gt;(mQueue), signals, <span class="number">0</span>);</div><div class="line">        ASSERT(res);</div><div class="line">    &#125;</div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>改良后更新了步骤，注释的就是步骤，方便接下来讨论这两段代码的隐患，因为仅仅这些还不够。目前现总结下mMutex作用：</p>
<p><code>1 mMutex用于signal函数内部和wait函数 获取信号量之后的代码互斥，保护类的常用变量。</code>  </p>
<p><code>2 当不同的线程调用wait等待后获得激活时，mMutex保证获得信号量之后的操作是互斥的，安全的。</code>  </p>
<p>由于调用wait函数之前需要加外部的互斥锁，所以不同的线程调用wai函数时第一步的mBlocked++是互斥的，不会出错。  </p>
<p>唯一有可能出错的是那种情况呢？  </p>
<p>就是当signal发出信号后，当前有一个因为调用wait阻塞的线程A捕获到该信号，进入第四步，修改或者访问mBlocked变量的值，与此同时有线程A调用wait函数，此时会进入wait内部第一步mBlocked++，多线程修改和读取mBlocked会造成数据混乱，所以此时需要在第一步之前加锁，第2步之前解锁，因此添加单个信号量mGate，用于控制当有线程处于解锁状态处理mBlocked等类成员时，其他线程进入wait修改mBlocked值。<br>这个res = WaitForSingleObject(reinterpret_cast<handle>(mGate), INFINITE);可以放在wait函数第4步之后，当第4步获得互斥资源后，阻塞等待获取mGate信号，如果没获得需要等待别的线程释放mGate，如果此时mGate不被释放造成mMutex死锁。所以别的线程中先调用 WaitForSingleObject(reinterpret_cast<handle>(mGate), INFINITE);后调用WaitForSingleObject mMutex会造成死锁。需要特别注意。如果规避了这一点，那么就可以避免死锁。所有情况都对mGate互斥访问并不友好，出现之前讨论的情况只有一种：就是当前应用程序中至少有一个线程处于等待，而signal释放信号后，某一个等待的线程继续执行4后面的操作，外界有新的线程调用wait时修改mBlocked会出错。所以只需要在signal函数中判断当mWaiting数量为0时对mGate加锁，mWait根据不同情况进行对mGate进行释放。<br>修改后的代码如下：  </handle></handle></p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">void</span></div><div class="line">Condition::enterWait ()</div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> res = <span class="number">0</span>;</div><div class="line">    res = WaitForSingleObject(<span class="keyword">reinterpret_cast</span>&lt;HANDLE&gt;(mGate), INFINITE);</div><div class="line">    ASSERT(res == WAIT_OBJECT_0);</div><div class="line">    ++mBlocked;</div><div class="line">    res = ReleaseSemaphore(<span class="keyword">reinterpret_cast</span>&lt;HANDLE&gt;(mGate), <span class="number">1</span>, <span class="number">0</span>);</div><div class="line">    ASSERT(res);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>对mBlocked起到保护作用<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">void</span></div><div class="line">Condition::wait(Mutex&amp; mutex)</div><div class="line">&#123;</div><div class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> WIN32</span></div><div class="line">    <span class="keyword">int</span> ret = pthread_cond_wait(&amp;mId, mutex.getId());</div><div class="line">    ASSERT(ret == <span class="number">0</span>);</div><div class="line"><span class="meta">#<span class="meta-keyword">else</span></span></div><div class="line">    <span class="comment">//1</span></div><div class="line">　　enterWait();</div><div class="line">　　<span class="comment">//2</span></div><div class="line">    mutex.unlock();</div><div class="line"></div><div class="line">    <span class="keyword">int</span> res = <span class="number">0</span>;</div><div class="line">　　<span class="comment">//3</span></div><div class="line">    res = WaitForSingleObject(<span class="keyword">reinterpret_cast</span>&lt;HANDLE&gt;(mQueue), INFINITE);</div><div class="line">    ASSERT(res == WAIT_OBJECT_0);</div><div class="line"></div><div class="line">    <span class="keyword">unsigned</span> wasWaiting = <span class="number">0</span>;</div><div class="line">    <span class="keyword">unsigned</span> wasGone = <span class="number">0</span>;</div><div class="line">　　<span class="comment">//4</span></div><div class="line">    res = WaitForSingleObject(<span class="keyword">reinterpret_cast</span>&lt;HANDLE&gt;(mMutex), INFINITE);</div><div class="line">    ASSERT(res == WAIT_OBJECT_0);</div><div class="line">    wasWaiting = mWaiting;</div><div class="line">    wasGone = mGone;</div><div class="line">　　<span class="comment">//signal释放资源后，mWaiting 至少为1</span></div><div class="line">    <span class="keyword">if</span> (wasWaiting != <span class="number">0</span>)</div><div class="line">    &#123;</div><div class="line">　　　　<span class="comment">//判断mWaiting 数量为1</span></div><div class="line">        <span class="keyword">if</span> (--mWaiting == <span class="number">0</span>)</div><div class="line">        &#123;</div><div class="line">　　　　　　　<span class="comment">//如果当前没有阻塞线程则释放mGate</span></div><div class="line">            <span class="keyword">if</span> (mBlocked != <span class="number">0</span>)</div><div class="line">            &#123;</div><div class="line">                res = ReleaseSemaphore(<span class="keyword">reinterpret_cast</span>&lt;HANDLE&gt;(mGate), <span class="number">1</span>, <span class="number">0</span>); <span class="comment">// open mGate</span></div><div class="line">                ASSERT(res);</div><div class="line">                wasWaiting = <span class="number">0</span>;</div><div class="line">            &#125;</div><div class="line">           </div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">   <span class="comment">//5</span></div><div class="line">    res = ReleaseMutex(<span class="keyword">reinterpret_cast</span>&lt;HANDLE&gt;(mMutex));</div><div class="line">    ASSERT(res);</div><div class="line">　　<span class="comment">//6</span></div><div class="line">    mutex.lock();</div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>对应的signal函数：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">void</span></div><div class="line">Condition::signal ()</div><div class="line">&#123;</div><div class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> WIN32</span></div><div class="line">    <span class="keyword">int</span> ret = pthread_cond_signal(&amp;mId);</div><div class="line">    ASSERT(ret == <span class="number">0</span>);</div><div class="line"><span class="meta">#<span class="meta-keyword">else</span></span></div><div class="line">    <span class="keyword">unsigned</span> signals = <span class="number">0</span>;</div><div class="line"></div><div class="line">    <span class="keyword">int</span> res = <span class="number">0</span>;</div><div class="line">　　<span class="comment">//1</span></div><div class="line">    res = WaitForSingleObject(<span class="keyword">reinterpret_cast</span>&lt;HANDLE&gt;(mMutex), INFINITE);</div><div class="line">    ASSERT(res == WAIT_OBJECT_0);</div><div class="line">　　</div><div class="line">    <span class="keyword">if</span> (mWaiting != <span class="number">0</span>) </div><div class="line">    &#123;</div><div class="line">　　　　<span class="comment">//当前有空闲的信号量并且没由阻塞的线程</span></div><div class="line">        <span class="keyword">if</span> (mBlocked == <span class="number">0</span>)</div><div class="line">        &#123;</div><div class="line">            res = ReleaseMutex(<span class="keyword">reinterpret_cast</span>&lt;HANDLE&gt;(mMutex));</div><div class="line">            ASSERT(res);</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        &#125;</div><div class="line">　　　　<span class="comment">//如果由阻塞的线程，那么阻塞数量--</span></div><div class="line">        ++mWaiting;</div><div class="line">        --mBlocked;</div><div class="line">        signals = <span class="number">1</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span></div><div class="line">    &#123;</div><div class="line">       <span class="comment">//2当空闲的信号量为0时，互斥获得mGate</span></div><div class="line">　　　　 res = WaitForSingleObject(<span class="keyword">reinterpret_cast</span>&lt;HANDLE&gt;(mGate), INFINITE);</div><div class="line">        ASSERT(res == WAIT_OBJECT_0);</div><div class="line">　　　　 <span class="comment">//3</span></div><div class="line">        <span class="keyword">if</span> (mBlocked )</div><div class="line">        &#123;</div><div class="line">          　<span class="comment">//如果当前有线程阻塞那么更新计数</span></div><div class="line">            signals = mWaiting = <span class="number">1</span>;</div><div class="line">            --mBlocked;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span></div><div class="line">        &#123;</div><div class="line">　　　　　　 <span class="comment">//由于用户外部不判断条件是否成立多次调动signal，此处不处理直接释放mGate</span></div><div class="line">            res = ReleaseSemaphore(<span class="keyword">reinterpret_cast</span>&lt;HANDLE&gt;(mGate), <span class="number">1</span>, <span class="number">0</span>);</div><div class="line">            ASSERT(res);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">　　<span class="comment">//4</span></div><div class="line">    res = ReleaseMutex(<span class="keyword">reinterpret_cast</span>&lt;HANDLE&gt;(mMutex));</div><div class="line">    ASSERT(res);</div><div class="line"></div><div class="line">　　<span class="comment">//5</span></div><div class="line">    <span class="keyword">if</span> (signals)</div><div class="line">    &#123;</div><div class="line">        res = ReleaseSemaphore(<span class="keyword">reinterpret_cast</span>&lt;HANDLE&gt;(mQueue), signals, <span class="number">0</span>);</div><div class="line">        ASSERT(res);</div><div class="line">    &#125;</div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>到目前为止，对于共享对象的保护和同步都做的比较完善了，还要注意一个问题就是虚假唤醒。这是操作系统可能出现的一种情况，所以需要添加虚假唤醒的逻辑用mGone成员变量表示出错的或是虚假唤醒的线程数<br>最终代码如下：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">void</span></div><div class="line">Condition::wait(Mutex&amp; mutex)</div><div class="line">&#123;</div><div class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> WIN32</span></div><div class="line">    <span class="keyword">int</span> ret = pthread_cond_wait(&amp;mId, mutex.getId());</div><div class="line">    ASSERT(ret == <span class="number">0</span>);</div><div class="line"><span class="meta">#<span class="meta-keyword">else</span></span></div><div class="line">    enterWait();</div><div class="line"></div><div class="line">    mutex.unlock();</div><div class="line"></div><div class="line">    <span class="keyword">int</span> res = <span class="number">0</span>;</div><div class="line">    res = WaitForSingleObject(<span class="keyword">reinterpret_cast</span>&lt;HANDLE&gt;(mQueue), INFINITE);</div><div class="line">    ASSERT(res == WAIT_OBJECT_0);</div><div class="line"></div><div class="line">    <span class="keyword">unsigned</span> wasWaiting = <span class="number">0</span>;</div><div class="line">    <span class="keyword">unsigned</span> wasGone = <span class="number">0</span>;</div><div class="line"></div><div class="line">    res = WaitForSingleObject(<span class="keyword">reinterpret_cast</span>&lt;HANDLE&gt;(mMutex), INFINITE);</div><div class="line">    ASSERT(res == WAIT_OBJECT_0);</div><div class="line">    wasWaiting = mWaiting;</div><div class="line">    wasGone = mGone;</div><div class="line">    <span class="keyword">if</span> (wasWaiting != <span class="number">0</span>)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span> (--mWaiting == <span class="number">0</span>)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">if</span> (mBlocked != <span class="number">0</span>)</div><div class="line">            &#123;</div><div class="line">                res = ReleaseSemaphore(<span class="keyword">reinterpret_cast</span>&lt;HANDLE&gt;(mGate), <span class="number">1</span>, <span class="number">0</span>); <span class="comment">// open mGate</span></div><div class="line">                ASSERT(res);</div><div class="line">                wasWaiting = <span class="number">0</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (mGone != <span class="number">0</span>)</div><div class="line">            &#123;</div><div class="line">                mGone = <span class="number">0</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (++mGone == (ULONG_MAX / <span class="number">2</span>))</div><div class="line">    &#123;</div><div class="line">        res = WaitForSingleObject(<span class="keyword">reinterpret_cast</span>&lt;HANDLE&gt;(mGate), INFINITE);</div><div class="line">        ASSERT(res == WAIT_OBJECT_0);</div><div class="line">        mBlocked -= mGone;</div><div class="line">        res = ReleaseSemaphore(<span class="keyword">reinterpret_cast</span>&lt;HANDLE&gt;(mGate), <span class="number">1</span>, <span class="number">0</span>);</div><div class="line">        ASSERT(res);</div><div class="line">        mGone = <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line">    res = ReleaseMutex(<span class="keyword">reinterpret_cast</span>&lt;HANDLE&gt;(mMutex));</div><div class="line">    ASSERT(res);</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (wasWaiting == <span class="number">1</span>)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">for</span> (; wasGone; --wasGone)</div><div class="line">        &#123;</div><div class="line">            res = WaitForSingleObject(<span class="keyword">reinterpret_cast</span>&lt;HANDLE&gt;(mQueue), INFINITE);</div><div class="line">            ASSERT(res == WAIT_OBJECT_0);</div><div class="line">        &#125;</div><div class="line">        res = ReleaseSemaphore(<span class="keyword">reinterpret_cast</span>&lt;HANDLE&gt;(mGate), <span class="number">1</span>, <span class="number">0</span>);</div><div class="line">        ASSERT(res);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    mutex.lock();</div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>wait部分添加了mGone的处理，当mWaiting数量为0进入<br>res = WaitForSingleObject(reinterpret_cast<handle>(mMutex), INFINITE);<br>需要对mGone++表示虚假唤醒的线程数量<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> (++mGone == (ULONG_MAX / <span class="number">2</span>))</div><div class="line">    &#123;</div><div class="line">        res = WaitForSingleObject(<span class="keyword">reinterpret_cast</span>&lt;HANDLE&gt;(mGate), INFINITE);</div><div class="line">        ASSERT(res == WAIT_OBJECT_0);</div><div class="line">        mBlocked -= mGone;</div><div class="line">        res = ReleaseSemaphore(<span class="keyword">reinterpret_cast</span>&lt;HANDLE&gt;(mGate), <span class="number">1</span>, <span class="number">0</span>);</div><div class="line">        ASSERT(res);</div><div class="line">        mGone = <span class="number">0</span>;</div><div class="line">    &#125;</div></pre></td></tr></table></figure></handle></p>
<p>通过mGate对mBlocked保护起来，当唤醒的个数超过指定值会把多余的mblocked去掉并且把<br>虚假唤醒数量置空。举个例子，当mBLocked为1时该线程被虚假唤醒，那么mGone变为1，由于是<br>虚假唤醒，用户在外部调用wait函数时通过while循环判断条件不满足再次进入wait中enterGate<br>函数对mBlocked自增，此时mBlocked数量为2，所以当冗余的mBlocked超过指定值，就回去掉<br>这些mBlocked并将mGone置空。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> (wasWaiting == <span class="number">1</span>)</div><div class="line">&#123;</div><div class="line">   <span class="keyword">for</span> (; wasGone; --wasGone)</div><div class="line">   &#123;</div><div class="line">    res = WaitForSingleObject(<span class="keyword">reinterpret_cast</span>&lt;HANDLE&gt;(mQueue), INFINITE);</div><div class="line">    ASSERT(res == WAIT_OBJECT_0);</div><div class="line">   &#125;</div><div class="line">   res = ReleaseSemaphore(<span class="keyword">reinterpret_cast</span>&lt;HANDLE&gt;(mGate), <span class="number">1</span>, <span class="number">0</span>);</div><div class="line">   ASSERT(res);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>该函数判断Condation类的mWating变量有1变为0，并且阻塞的线程数为0，因为如果用户没有在外边调用while<br>判断条件导致虚假唤醒引起逻辑错误，所以为了起到保护作用对那些因为虚假唤醒错过的信号进行资源占用，<br>直到信号量都被释放后才进入mGate释放。举一个例子如果外部调用<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">Lock(mutex);</div><div class="line"><span class="keyword">if</span>(条件不满足)</div><div class="line">&#123;</div><div class="line">　　wait(mutex);</div><div class="line">　　</div><div class="line">&#125;</div><div class="line"><span class="comment">//逻辑处理</span></div><div class="line">　　　　...</div><div class="line">UnLock(mutex);</div></pre></td></tr></table></figure></p>
<p>当wait执行退出后会执行逻辑，而没有while判断条件是否真的满足。所以我们要对信号量进行控制，保证信号量<br>数量正确。并且和mBlocked，mWait,等一致。<br>下面是signal函数最终版本<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">void</span></div><div class="line">Condition::signal ()</div><div class="line">&#123;</div><div class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> WIN32</span></div><div class="line">    <span class="keyword">int</span> ret = pthread_cond_signal(&amp;mId);</div><div class="line">    ASSERT(ret == <span class="number">0</span>);</div><div class="line"><span class="meta">#<span class="meta-keyword">else</span></span></div><div class="line">    <span class="keyword">unsigned</span> signals = <span class="number">0</span>;</div><div class="line"></div><div class="line">    <span class="keyword">int</span> res = <span class="number">0</span>;</div><div class="line">    res = WaitForSingleObject(<span class="keyword">reinterpret_cast</span>&lt;HANDLE&gt;(mMutex), INFINITE);</div><div class="line">    ASSERT(res == WAIT_OBJECT_0);</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (mWaiting != <span class="number">0</span>) </div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span> (mBlocked == <span class="number">0</span>)</div><div class="line">        &#123;</div><div class="line">            res = ReleaseMutex(<span class="keyword">reinterpret_cast</span>&lt;HANDLE&gt;(mMutex));</div><div class="line">            ASSERT(res);</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        ++mWaiting;</div><div class="line">        --mBlocked;</div><div class="line">        signals = <span class="number">1</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span></div><div class="line">    &#123;</div><div class="line">        res = WaitForSingleObject(<span class="keyword">reinterpret_cast</span>&lt;HANDLE&gt;(mGate), INFINITE);</div><div class="line">        ASSERT(res == WAIT_OBJECT_0);</div><div class="line">        <span class="keyword">if</span> (mBlocked &gt; mGone)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">if</span> (mGone != <span class="number">0</span>)</div><div class="line">            &#123;</div><div class="line">                mBlocked -= mGone;</div><div class="line">                mGone = <span class="number">0</span>;</div><div class="line">            &#125;</div><div class="line">            signals = mWaiting = <span class="number">1</span>;</div><div class="line">            --mBlocked;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span></div><div class="line">        &#123;</div><div class="line">            res = ReleaseSemaphore(<span class="keyword">reinterpret_cast</span>&lt;HANDLE&gt;(mGate), <span class="number">1</span>, <span class="number">0</span>);</div><div class="line">            ASSERT(res);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    res = ReleaseMutex(<span class="keyword">reinterpret_cast</span>&lt;HANDLE&gt;(mMutex));</div><div class="line">    ASSERT(res);</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (signals)</div><div class="line">    &#123;</div><div class="line">        res = ReleaseSemaphore(<span class="keyword">reinterpret_cast</span>&lt;HANDLE&gt;(mQueue), signals, <span class="number">0</span>);</div><div class="line">        ASSERT(res);</div><div class="line">    &#125;</div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>同样的道理<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> (mBlocked &gt; mGone)</div><div class="line"> &#123;</div><div class="line">    <span class="keyword">if</span> (mGone != <span class="number">0</span>)</div><div class="line">    &#123;</div><div class="line">         mBlocked -= mGone;</div><div class="line">         mGone = <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line">    signals = mWaiting = <span class="number">1</span>;</div><div class="line">    --mBlocked;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>这个逻辑就是处理当虚假唤醒的mBlocked和mGone等数据准确性。因为如果是虚假唤醒，用户通过while(条件不满足)这个方式继续调用wait会导致mBlocked++，假设就一个线程处于阻塞并且因为虚假唤醒通过while循环重新调用wait函数，而此时mGone比mBlocked小1，所以mBlocked - mGone就是更新差值给mBlocked，这是真正的处于阻塞的线程数量。  </p>
<p>下面是代码下载地址：<br><a href="http://download.csdn.net/detail/secondtonone1/9658645" target="_blank" rel="external">betternet</a>  </p>
<p>代码效果测试截图：<br><img src="/2017/08/03/winsignal/1.png" alt="1.png"></p>
<p><img src="/2017/08/03/winsignal/2.png" alt="2.png"></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;linux 环境有提供好的&lt;code&gt;pthread_cond_wait()&lt;/code&gt; 和 &lt;code&gt;phread_signal()&lt;/code&gt;、&lt;code&gt;pthread_broadcast()&lt;/code&gt;windows需要自己封装，利用&lt;code&gt;semophore&lt;/code&gt;控制线程等待和释放，先简单谈一下设计好后api该如何使用。假设我们封装好条件变量等待函数名字叫做&lt;code&gt;wait(Mutex&amp;amp; mutex)&lt;/code&gt;，Mutex是之前我们封装的条件变量，文章最下边会给出这些文件的下载地址，在这里读者当做linux 的mutex即可。我们封装的释放函数为&lt;code&gt;signal()&lt;/code&gt;,广播函数为&lt;code&gt;broadcast&lt;/code&gt;。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="技术开发" scheme="http://www.limerence2017.com/categories/tech/"/>
    
    
      <category term="C++" scheme="http://www.limerence2017.com/tags/C/"/>
    
      <category term="Windows环境编程" scheme="http://www.limerence2017.com/tags/Windows%E7%8E%AF%E5%A2%83%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>C++类成员空间分配和虚函数表</title>
    <link href="http://www.limerence2017.com/2017/08/03/cppvirtual/"/>
    <id>http://www.limerence2017.com/2017/08/03/cppvirtual/</id>
    <published>2017-08-03T06:46:34.000Z</published>
    <updated>2017-08-03T10:55:04.728Z</updated>
    
    <content type="html"><![CDATA[<p>最近在自学python，看到继承和类，就顺便复习了C++的类和继承等方面的知识。<br>先看Base基类<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Base</span> &#123;</span></div><div class="line"></div><div class="line"><span class="keyword">private</span>:</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">display</span><span class="params">()</span> </span>&#123; <span class="built_in">cout</span>&lt;&lt;<span class="string">"Base display()"</span>&lt;&lt;<span class="built_in">endl</span>; &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">say</span><span class="params">()</span></span>&#123; <span class="built_in">cout</span>&lt;&lt;<span class="string">"Base say()"</span>&lt;&lt;<span class="built_in">endl</span>; &#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span>:</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">func</span><span class="params">()</span></span>&#123;<span class="built_in">cout</span> &lt;&lt; <span class="string">"Base func()"</span> &lt;&lt; <span class="built_in">endl</span>; &#125;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">exec</span><span class="params">()</span></span>&#123; display(); say(); &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">f1</span><span class="params">(<span class="built_in">string</span> a)</span> </span>&#123; <span class="built_in">cout</span>&lt;&lt;<span class="string">"Base f1(string)"</span>&lt;&lt;<span class="built_in">endl</span>; &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">f1</span><span class="params">(<span class="keyword">int</span> a)</span> </span>&#123; <span class="built_in">cout</span>&lt;&lt;<span class="string">"Base f1(int)"</span>&lt;&lt;<span class="built_in">endl</span>; &#125;   <span class="comment">//overload</span></div><div class="line"></div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<a id="more"></a>
<p>Base类中定义私有的虚函数display， 普通成员函数say，公共的虚函数func， 普通的成员函数exec，重载了f1函数。下面是DeriveA类，继承于Base类<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">DeriveA</span>:</span><span class="keyword">public</span> Base&#123;</div><div class="line"></div><div class="line"><span class="keyword">public</span>:</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">display</span><span class="params">()</span> </span>&#123; <span class="built_in">cout</span>&lt;&lt;<span class="string">"DeriveA display()"</span>&lt;&lt;<span class="built_in">endl</span>; &#125;         <span class="comment">//override</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">f1</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span> </span>&#123; <span class="built_in">cout</span>&lt;&lt;<span class="string">"DeriveA f1(int,int)"</span>&lt;&lt;<span class="built_in">endl</span>; &#125;   <span class="comment">//redefining</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">say</span><span class="params">()</span> </span>&#123; <span class="built_in">cout</span>&lt;&lt;<span class="string">"DeriveA say()"</span>&lt;&lt;<span class="built_in">endl</span>; &#125;   <span class="comment">//redefining</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">func</span><span class="params">()</span></span>&#123;<span class="built_in">cout</span> &lt;&lt; <span class="string">"DeriveA func()"</span> &lt;&lt; <span class="built_in">endl</span>; &#125;</div><div class="line"></div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<p>DeriveA类继承了Base类，重写(覆盖)了虚函数display和func，并且将display权限修改为public。重定义了f1函数和say函数，但是修改了f1的参数列表。下面是基础的几个测试<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">DeriveA a;</div><div class="line">Base *b=&amp;a;</div><div class="line">   b-&gt;func();</div><div class="line">   a.func();</div><div class="line">   b-&gt;f1(<span class="string">"abc"</span>);</div><div class="line">   b-&gt;f1(<span class="number">3</span>);</div><div class="line">   a.f1(<span class="number">3</span>,<span class="number">5</span>);</div></pre></td></tr></table></figure></p>
<p>输出结果:<br><img src="/2017/08/03/cppvirtual/cppvirtual1.png" alt="cppvirtual1"><br>func函数在Base类中为虚函数，DeriveA继承Base后，根据多态机制实现了动态调用。所谓多态机制就是用基类指针指向子类对象，基类指针调用虚函数func，会动态调用实际的子类对象的func函数。由于display函数在Base类中为虚函数，所以不可以通过b-&gt;display()调用。由于DeriveA重新定义(redefining)了f1函数，f1函数参数类型修改了，所以只能使用a.f1(int,int)这种调用，而采用a.f1(string)或者采用a.f1(int)这种调用都会出错，编译阶段就会出错。因为DeriveA类对f1重新定义了，基类的f1函数不可通过对象直接调用。同样的道理对于基类指针或对象，无论基类指针指向子类还是基类对象，调用f1只能调用基类定义的两个f1(int)， f1(string)两个函数，<br>如果采用b-&gt;f1(3,5)，编译器在编译阶段就会提出错误。想实现子类对象调用基类的函数可在函数体内加上作用于Base::函数名(参数，…)<br>DeriveA类修改f1函数，先调用基类的f1在调用自己的f1<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">DeriveA</span>:</span><span class="keyword">public</span> Base&#123;</div><div class="line"></div><div class="line"><span class="keyword">public</span>:</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">display</span><span class="params">()</span> </span>&#123; <span class="built_in">cout</span>&lt;&lt;<span class="string">"DeriveA display()"</span>&lt;&lt;<span class="built_in">endl</span>; &#125;   <span class="comment">//override</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">f1</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span> </span>&#123; </div><div class="line">        Base::f1(<span class="number">2</span>);</div><div class="line">        Base::f1(<span class="string">"test"</span>);</div><div class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"DeriveA f1(int,int)"</span>&lt;&lt;<span class="built_in">endl</span>; &#125;   <span class="comment">//redefining</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">say</span><span class="params">()</span> </span>&#123; <span class="built_in">cout</span>&lt;&lt;<span class="string">"DeriveA say()"</span>&lt;&lt;<span class="built_in">endl</span>; &#125;   <span class="comment">//redefining</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">func</span><span class="params">()</span></span>&#123;</div><div class="line">        </div><div class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"DeriveA func()"</span> &lt;&lt; <span class="built_in">endl</span>; &#125;</div><div class="line"></div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<p>打印输出a.f1(3,5);<br>结果如下：<br><img src="/2017/08/03/cppvirtual/cppvirtual2.png" alt="cppvirtual2"><br>先调用了基类的两个f1函数，之后调用DeriveA的f1函数<br>下面调用如下函数<br>b-&gt;exec();<br>a.exec();<br>结果如下：<br><img src="/2017/08/03/cppvirtual/cppvirtual3.png" alt="cppvirtual3"><br>为什么两个结果一样呢？<br>先看b-&gt;exec()；由于b是Base类型变量，那么调用的Base类的exec函数，exec函数内部调用Base类的display()和say() 函数。由于b为指向DeriveA类的基类指针，根据多态机制，调用Base类的display()函数时，会动态调用DeriveA类的display()函数。调用Base类的say()函数时，由于say()函数不是虚函数，所以不触发多态机制。<br>因此b-&gt;exec()函数的结果为调用DeriveA的display，调用Base的say函数。由于DeriveA类继承于Base类，但是没有实现自己的exec()函数，即没有实现重定义，那么当执行a.exec()时，调用的时Base类的exec()函数，原理和上边一样，调用Base类中的display()函数和say()函数，由于display()函数为虚函数，a为DeriveA类对象，调用基类的虚函数display()，根据多态机制，实际调用的是DeriveA类的display()函数。<br>执行下边代码<br>a.say()<br>结果如下：<br><img src="/2017/08/03/cppvirtual/4.png" alt="4"><br>下面修改DeriveA类的内容，在DeriveA类内部实现自己的exec()函数<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">DeriveA</span>:</span><span class="keyword">public</span> Base&#123;</div><div class="line"></div><div class="line"><span class="keyword">public</span>:</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">exec</span><span class="params">()</span></span>&#123; display(); say(); &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">display</span><span class="params">()</span> </span>&#123; <span class="built_in">cout</span>&lt;&lt;<span class="string">"DeriveA display()"</span>&lt;&lt;<span class="built_in">endl</span>; &#125;   <span class="comment">//override</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">f1</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span> </span>&#123; </div><div class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"DeriveA f1(int,int)"</span>&lt;&lt;<span class="built_in">endl</span>; &#125;   <span class="comment">//redefining</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">say</span><span class="params">()</span> </span>&#123; <span class="built_in">cout</span>&lt;&lt;<span class="string">"DeriveA say()"</span>&lt;&lt;<span class="built_in">endl</span>; &#125;   <span class="comment">//redefining</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">func</span><span class="params">()</span></span>&#123;</div><div class="line">        </div><div class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"DeriveA func()"</span> &lt;&lt; <span class="built_in">endl</span>; &#125;</div><div class="line"></div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<p>执行下边代码，<br>b-&gt;exec()；<br>a.exec():<br>结果如下:<br><img src="/2017/08/03/cppvirtual/5.png" alt="5"><br>因为DeriveA类重定义了exec函数，那么a.exec()函数调用的是DeriveA类的exec()函数，从而调用的都是DeriveA类的display()和say()函数。  </p>
<h2 id="继承类和基类成员函数调用规则总结："><a href="#继承类和基类成员函数调用规则总结：" class="headerlink" title="继承类和基类成员函数调用规则总结："></a>继承类和基类成员函数调用规则总结：</h2><p>DeriveA a;<br>  Base *b=&a;  </p>
<ol>
<li><p><code>基类指针指向子类对象，该指针调用某个成员函数，先考虑该函数是否为虚函数，如果为虚函数，且子类有覆盖(重写)，会触发多态机制，动态调用子类的重写函数：
如 b-&gt;func()， 输出为DeriveA func()</code></p>
</li>
<li><p><code>基类指针指向子类对象，该指针调用某个成员函数，先考虑该函数是否为虚函数，如果为虚函数，子类没有覆盖(没有重写)，不会触发多态机制，调用基类的虚函数：</code></p>
</li>
<li><p><code>基类指针指向子类对象，该指针调用某个成员函数，如果该函数不为虚函数，无论该函数是否被子类重定义(redefined)，只调用基类的该成员函数。如DeriveA类内部不实现exec()函数，那么b-&gt;exec()调用的是Base类的exec()函数。</code></p>
</li>
<li><p><code>在第3条基础上，基类有成员函数exec()， 子类没有成员函数exec()，在基类的exec() 内部调用虚函数display()， 且子类覆盖了display()函数，那么根据多态机制，调用子类的display()。如果display()虚函数没有被重写，则调用基类的display()函数，同第2条。如果exec()内部调用普通函数say()， 无论子类是否重定义say()，都会调用基类的say()函数，同3</code></p>
</li>
<li><p><code>Base类中实现exec()函数，而子类DeriveA类内部不实现exec()函数，DeriveA类对象调用exec()函数，实际调用的为Base类内部的exec()函数。如果exec()内部调用虚函数或者普通成员函数，情况如同第4条。</code></p>
</li>
<li><p><code>Base类中实现exec()函数，而子类DeriveA类重定义exec()函数，那么DeriveA类对象调用的是DeriveA类的exec()函数。如果exec()函数内部调用DeriveA类的其他成员函数，那么调用的都是DeriveA类的成员函数。</code></p>
</li>
<li><p><code>子类重定义了基类的成员函数，那么子类对象调用该成员函数，要根据子类重定义的形参列表。如a.f1(3,5);</code>  </p>
<h2 id="虚函数使用和定义规则"><a href="#虚函数使用和定义规则" class="headerlink" title="虚函数使用和定义规则:"></a>虚函数使用和定义规则:</h2></li>
</ol>
<ol>
<li><p><code>非类的成员函数不能定义为虚函数，类的成员函数中静态成员函数和构造函数也不能定义为虚函数，但可以将析构函数定义为虚函数。实际上，优秀的程序员常常把基类的析构函数定义为虚函数。</code>因为，将基类的析构函数定义为虚函数后，当利用delete删除一个指向派生类定义的对象指针时，系统会调用相应的类的析构函数。而不将析构函数定义为虚函数时，只调用基类的析构函数。</p>
</li>
<li><p><code>只需要在声明函数的类体中使用关键字“virtual”将函数声明为虚函数，而定义函数时不需要使用关键字“virtual”。</code></p>
</li>
<li><p><code>如果声明了某个成员函数为虚函数，则在该类中不能出现和这个成员函数同名并且返回值、参数个数、参数类型都相同的非虚函数。在以该类为基类的派生类中，也不能出现这种非虚的同名同返回值同参数个数同参数类型函数。</code></p>
</li>
</ol>
<h2 id="类的静态函数和构造函数不可以定义为虚函数"><a href="#类的静态函数和构造函数不可以定义为虚函数" class="headerlink" title="类的静态函数和构造函数不可以定义为虚函数:"></a>类的静态函数和构造函数不可以定义为虚函数:</h2><ol>
<li><p>静态函数的目的是通过类名+函数名访问类的static变量，或者通过对象调用staic函数实现对static成员变量的读写，要求内存中只有一份数据。而虚函数在子类中重写，并且通过多态机制实现动态调用，在内存中需要保存不同的重写版本。</p>
</li>
<li><p>构造函数的作用是构造对象，而虚函数的调用是在对象已经构造完成，并且通过调用时动态绑定。动态绑定是因为每个类对象内部都有一个指针，指向虚函数表的首地址。而且虚函数，类的成员函数，static成员函数都不是存储在类对象中，而是在内存中只保留一份。</p>
<h2 id="知其然、知其所以然（虚函数表原理）："><a href="#知其然、知其所以然（虚函数表原理）：" class="headerlink" title="知其然、知其所以然（虚函数表原理）："></a>知其然、知其所以然（虚函数表原理）：</h2><p>虚函数存储在虚函数表中，每个类对象都包含一个指向该虚函数表首地址的指针。定义Baseclass类  </p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Baseclass</span> &#123;</span> </div><div class="line"></div><div class="line"><span class="keyword">public</span>: </div><div class="line">    Baseclass():a(<span class="number">1024</span>)&#123;&#125;</div><div class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">f</span><span class="params">()</span> </span>&#123; <span class="built_in">cout</span> &lt;&lt; <span class="string">"Base::f"</span> &lt;&lt; <span class="built_in">endl</span>; &#125; </div><div class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">g</span><span class="params">()</span> </span>&#123; <span class="built_in">cout</span> &lt;&lt; <span class="string">"Base::g"</span> &lt;&lt; <span class="built_in">endl</span>; &#125; </div><div class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">h</span><span class="params">()</span> </span>&#123; <span class="built_in">cout</span> &lt;&lt; <span class="string">"Base::h"</span> &lt;&lt; <span class="built_in">endl</span>; &#125; </div><div class="line">    <span class="keyword">int</span> a;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
</li>
</ol>
<p>从虚函数表中依次取出函数执行：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">Baseclass b; </div><div class="line"></div><div class="line">   <span class="built_in">cout</span> &lt;&lt;<span class="string">"类对象大小"</span> &lt;&lt;  <span class="keyword">sizeof</span>(b) &lt;&lt; <span class="built_in">endl</span>;</div><div class="line"></div><div class="line">   <span class="keyword">int</span> * p = (<span class="keyword">int</span> *)(&amp;b) ;</div><div class="line">   <span class="built_in">cout</span> &lt;&lt; <span class="string">"指向虚函数表的指针的地址"</span>&lt;&lt; p &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">   <span class="built_in">cout</span> &lt;&lt;<span class="string">"成员a地址"</span>&lt;&lt; p+<span class="number">1</span> &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">   <span class="built_in">cout</span> &lt;&lt;<span class="string">"成员a的数值"</span> &lt;&lt; *(p + <span class="number">1</span>) &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">   <span class="built_in">cout</span> &lt;&lt; <span class="string">"虚函数表首地址"</span> &lt;&lt;(<span class="keyword">int</span> *)(*p)  &lt;&lt; <span class="built_in">endl</span>;</div><div class="line"></div><div class="line">   Func pFun =(Func) *(<span class="keyword">int</span> *)(*p);</div><div class="line">   pFun();</div><div class="line"></div><div class="line">    pFun =(Func) *((<span class="keyword">int</span> *)(*p) + <span class="number">1</span>);</div><div class="line">   pFun();</div><div class="line"></div><div class="line">    pFun =(Func) *((<span class="keyword">int</span> *)(*p) + <span class="number">2</span>);</div><div class="line">   pFun();</div></pre></td></tr></table></figure></p>
<p>输出结果如下:<br><img src="/2017/08/03/cppvirtual/6.png" alt="6"><br>可见类对象大小为8字节，4字节正好是指向虚函数表指针的大小。剩余4字节为成员变量a的大小。画个图示意虚函数表结构：<br><img src="/2017/08/03/cppvirtual/7.png" alt="7"><br>p指向的就是类对象的首地址，同时也是虚函数表指针(指向虚函数表的指针)的地址，<em>p指向虚函数表，由于指针是4字节，(int </em>)(<em>p)虚函数表首地址，也是第一个函数指针的地址。<br>Derive类继承于Base类，但是没有覆盖(重写)Base类的虚函数，Derive d; 的虚函数表如下：<br><img src="/2017/08/03/cppvirtual/8.png" alt="8"><br>Derive类继承于Base类，并且覆盖(重写)Base类的虚函数，Derive d; 的虚函数表如下：<br><img src="/2017/08/03/cppvirtual/9.png" alt="9"><br>可以看到d的虚函数表中第一个单元为Derive::f()，覆盖了原有的Base::f()。<br>Derive d;<br>Base </em> p = &d;<br>p指向d的首地址，其实就是d的虚函数表指针的地址，p-&gt;f()实际会调用虚函数表中的Derive::f()，从而实现多态。<br>多重继承结构如下：<br><img src="/2017/08/03/cppvirtual/10.png" alt="10"><br>虚函数表原理后可以篡改部分程序功能，其实很多外挂就是钩子函数回调注入的。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Baseclass</span> &#123;</span> </div><div class="line"></div><div class="line"><span class="keyword">public</span>: </div><div class="line">    Baseclass():a(<span class="number">1024</span>)&#123;&#125;</div><div class="line"><span class="keyword">private</span>:</div><div class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">f</span><span class="params">()</span> </span>&#123; <span class="built_in">cout</span> &lt;&lt; <span class="string">"Base::f"</span> &lt;&lt; <span class="built_in">endl</span>; &#125; </div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">g</span><span class="params">()</span> </span>&#123; <span class="built_in">cout</span> &lt;&lt; <span class="string">"Base::g"</span> &lt;&lt; <span class="built_in">endl</span>; &#125; </div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">h</span><span class="params">()</span> </span>&#123; <span class="built_in">cout</span> &lt;&lt; <span class="string">"Base::h"</span> &lt;&lt; <span class="built_in">endl</span>; &#125; </div><div class="line"></div><div class="line">    <span class="keyword">int</span> a;</div><div class="line">&#125;; </div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Deriveclass</span>:</span><span class="keyword">public</span> Baseclass&#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    Deriveclass():Baseclass()&#123;&#125;</div><div class="line"></div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<p>由于 Baseclass内部的虚函数是私有的，所以Deriveclass类变量是不能直接访问这些函数的。但是可以通过虚函数寻址，并且通过回调函数方式调用。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Deriveclass d;</div><div class="line">    Func pFunc = (Func)*((<span class="keyword">int</span> *)(*(<span class="keyword">int</span> *)(&amp;d)));</div><div class="line">    pFunc();</div></pre></td></tr></table></figure></p>
<p>结果如下：<br><img src="/2017/08/03/cppvirtual/11.png" alt="11"></p>
<h2 id="C-类对象的大小为多大？"><a href="#C-类对象的大小为多大？" class="headerlink" title="C++类对象的大小为多大？"></a>C++类对象的大小为多大？</h2><p><code>一个类中，虚函数、成员函数（包括静态与非静态）和静态数据成员都是不占用类对象的存储空间的。对象大小=   vptr(可能不止一个)   +   所有非静态数据成员大小   +   Aligin字节大小（依赖于不同的编译器对齐和补齐）</code><br>定义几个类，然后输出他们大小。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span>   <span class="title">A</span>    </span></div><div class="line"><span class="class">&#123;</span>    </div><div class="line">&#125;;    </div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span>   <span class="title">B</span>    </span></div><div class="line"><span class="class">&#123;</span>    </div><div class="line">    <span class="keyword">char</span>   ch;    </div><div class="line">    <span class="function"><span class="keyword">void</span>   <span class="title">func</span><span class="params">()</span>    </span></div><div class="line"><span class="function">    </span>&#123;    </div><div class="line">    &#125;    </div><div class="line">&#125;;    </div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span>   <span class="title">C</span>    </span></div><div class="line"><span class="class">&#123;</span>    </div><div class="line">    <span class="keyword">char</span>   ch1;    <span class="comment">//占用1字节 </span></div><div class="line">    <span class="keyword">char</span>   ch2;   <span class="comment">//占用1字节 </span></div><div class="line">    <span class="function"><span class="keyword">virtual</span>   <span class="keyword">void</span>   <span class="title">func</span><span class="params">()</span>    </span></div><div class="line"><span class="function">    </span>&#123;    </div><div class="line">    &#125;    </div><div class="line">&#125;;    </div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span>   <span class="title">D</span>    </span></div><div class="line"><span class="class">&#123;</span>    </div><div class="line">    <span class="keyword">int</span>   in;    </div><div class="line">    <span class="function"><span class="keyword">virtual</span>   <span class="keyword">void</span>   <span class="title">func</span><span class="params">()</span>    </span></div><div class="line"><span class="function">    </span>&#123;    </div><div class="line">    &#125;    </div><div class="line">&#125;;    </div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">E</span></span></div><div class="line"><span class="class">&#123;</span></div><div class="line">    <span class="keyword">char</span> m;</div><div class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">func</span><span class="params">()</span></span></div><div class="line"><span class="function">    </span>&#123;</div><div class="line">    </div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<p>输出大小：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">A   a;  </div><div class="line">  B   b; </div><div class="line">  C   c;  </div><div class="line">  D   d; </div><div class="line">  E    e;</div><div class="line">  <span class="built_in">cout</span>&lt;&lt;<span class="string">"a对象大小： "</span>&lt;&lt; <span class="keyword">sizeof</span>(a)&lt;&lt;<span class="built_in">endl</span>; </div><div class="line">  <span class="built_in">cout</span>&lt;&lt;<span class="string">"b对象大小： "</span>&lt;&lt; <span class="keyword">sizeof</span>(b)&lt;&lt;<span class="built_in">endl</span>; </div><div class="line">  <span class="built_in">cout</span>&lt;&lt;<span class="string">"c对象大小： "</span> &lt;&lt;<span class="keyword">sizeof</span>(c)&lt;&lt;<span class="built_in">endl</span>; </div><div class="line">  <span class="built_in">cout</span>&lt;&lt;<span class="string">"d对象大小： "</span>&lt;&lt; <span class="keyword">sizeof</span>(d)&lt;&lt;<span class="built_in">endl</span>; </div><div class="line">  <span class="built_in">cout</span> &lt;&lt;<span class="string">"e对象大小： "</span> &lt;&lt;<span class="keyword">sizeof</span>(e) &lt;&lt;<span class="built_in">endl</span>;</div></pre></td></tr></table></figure></p>
<p>结果如下：<br> <img src="/2017/08/03/cppvirtual/12.png" alt="12">  </p>
<h2 id="类和结构体对象对齐和补齐原则？"><a href="#类和结构体对象对齐和补齐原则？" class="headerlink" title="类和结构体对象对齐和补齐原则？"></a>类和结构体对象对齐和补齐原则？</h2><p><code>对齐：类(结构体)对象每个成员分配内存的起始地址为其所占空间的整数倍。</code><br><code>补齐：类(结构体)对象所占用的总大小为其内部最大成员所占空间的整数倍。</code>  </p>
<p>空类定义的对象a  大小为1因为每个对象是独一无二的，编译器为了标识不同对象，要分配一字节的大小作为标识码。<br>对象b 大小为1是因为成员函数在内存中只存储一份，不会存储在对象中。<br>对象c大小为8， 是因为前四个字节存储虚函数表的指针，第5个字节存储成员变量ch1，第6个字节存储成员变量ch2，这样c的大小为6，根据补齐原则，需要补充2字节，使对象大小为8，8是最大字节4的整数倍。<br>对象d大小为8，不需要补齐和对齐。<br>对象e大小为8，前四个字节存储虚函数表指针，第5个字节存储成员m，需要补齐三个字节，总共八个字节，为4字节的倍数。<br>看看下边这几个类<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">F</span>&#123;</span> </div><div class="line">    <span class="keyword">static</span> <span class="keyword">int</span> num; </div><div class="line">&#125;; </div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">G</span>&#123;</span> </div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">()</span></span>&#123;&#125; </div><div class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span>  <span class="title">print1</span><span class="params">()</span></span>&#123;&#125; </div><div class="line">&#125;; </div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">H</span>&#123;</span> </div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">()</span></span>&#123;&#125; </div><div class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">print1</span><span class="params">()</span></span>&#123;&#125; </div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<p>打印并输出大小:<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">F f;</div><div class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">"f 对象大小： "</span>&lt;&lt; <span class="keyword">sizeof</span>(f)&lt;&lt;<span class="built_in">endl</span>;</div><div class="line">G g;</div><div class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">"g 对象大小： "</span>&lt;&lt; <span class="keyword">sizeof</span>(g)&lt;&lt;<span class="built_in">endl</span>;</div><div class="line">H h;</div><div class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">"h 对象大小： "</span>&lt;&lt; <span class="keyword">sizeof</span>(h)&lt;&lt;<span class="built_in">endl</span>;</div></pre></td></tr></table></figure></p>
<p>结果：<br><img src="/2017/08/03/cppvirtual/13.png" alt="13"><br>静态成员变量，虚函数和static成员函数都不会占用对象的空间，f大小为1,是因为要开辟一个字节保存对象标识信息。<br>g大小为4是开辟四字节给虚函数表指针。h大小为1字节也是开辟一个字节保存对象标识信息  </p>
<h2 id="什么要采取对齐和补齐分配策略？"><a href="#什么要采取对齐和补齐分配策略？" class="headerlink" title="什么要采取对齐和补齐分配策略？"></a>什么要采取对齐和补齐分配策略？</h2><p>这个要从计算机CPU存取指令说起，<br><img src="/2017/08/03/cppvirtual/14.png" alt="14"><br>每个字节单元为8bit，从地址0到地址3总共四个字节，为32bit。<br> class  A{</p>
<p>  char  m;</p>
<p>  char  b;</p>
<p>};</p>
<p>A a;  对于a 将a.m分配在地址0开始的一个字节中，将a.b分配在地址1开始的额一个字节中。这样a的大小为2，cpu取数据可以执行一条指令就完成了。<br>class B{</p>
<p>  int m;</p>
<p>  char n;</p>
<p>};</p>
<p>B b; 对于b将b.m分配在地址为0开始的四个字节(0~3)，对于b.n分配在开始地址为4的一字节空间。如果再定一个B b2;，不采取补齐策略，b2.m将被分起始地址为5的</p>
<p>4字节空间(5~8)，b2.n就被分在了起始地址为9的一字节空间。cpu取数据需要分3次，先取出0~3地址空间的数据(b.m)，再取出地址4~7数据(b.n和b2.m的前三个字节)</p>
<p>最后取出地址为8~11的数据(b2.m的最后一个字节以及b2.n)。取出数据后还要拆分和组合，极大地降低了效率。所以需要采取补齐策略。补齐策略数据分配如下：</p>
<p>地址0~3存储b.m， 地址4~7存储b.n，由于b.n只占用1个字节，地址5~7不存储数据，用于补齐。  </p>
<p>地址8~11存储b2.m，地址12~15存储b2.n，13~15同样不存储数据用于补齐。  </p>
<p>这样cpu读取四次可以将数据读取出来，进行简单的组合不需要切割数据就可以完成快速处理。  </p>
<p>class C{</p>
<p>   char n;</p>
<p>   int  m;</p>
<p>}</p>
<p> C c； c.n存储周期0开始的一个字节中，如果不采取对齐策略，那么c.m会存储在1~4字节中，这样cpu需要读去两次，并且需要进行切割(0~4地址中数据包含c.n和c.m的前三个字节)，以及组合地址4开始的一个字节(存储c.m的最后一个字节)。<br> 如果采取对齐策略，那么地址0~3存储c.n，地址4~7存储c.m，cpu同样读取两次，但是仅需要组合就可以去除对象的所有数据。<br> 这就是为什么存储数据需要采取对齐和补齐的策略。<br>到此为止C++虚函数和类成员的存储知识复习完，谢谢关注我的公众号：<br><img src="/2017/08/03/cppvirtual/wxgzh.jpg" alt="wxgzh">  </p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近在自学python，看到继承和类，就顺便复习了C++的类和继承等方面的知识。&lt;br&gt;先看Base基类&lt;br&gt;&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Base&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt;:&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;virtual&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;display&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123; &lt;span class=&quot;built_in&quot;&gt;cout&lt;/span&gt;&amp;lt;&amp;lt;&lt;span class=&quot;string&quot;&gt;&quot;Base display()&quot;&lt;/span&gt;&amp;lt;&amp;lt;&lt;span class=&quot;built_in&quot;&gt;endl&lt;/span&gt;; &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;say&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&amp;#123; &lt;span class=&quot;built_in&quot;&gt;cout&lt;/span&gt;&amp;lt;&amp;lt;&lt;span class=&quot;string&quot;&gt;&quot;Base say()&quot;&lt;/span&gt;&amp;lt;&amp;lt;&lt;span class=&quot;built_in&quot;&gt;endl&lt;/span&gt;; &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt;:&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;virtual&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;span class=&quot;built_in&quot;&gt;cout&lt;/span&gt; &amp;lt;&amp;lt; &lt;span class=&quot;string&quot;&gt;&quot;Base func()&quot;&lt;/span&gt; &amp;lt;&amp;lt; &lt;span class=&quot;built_in&quot;&gt;endl&lt;/span&gt;; &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;exec&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&amp;#123; display(); say(); &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;f1&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;built_in&quot;&gt;string&lt;/span&gt; a)&lt;/span&gt; &lt;/span&gt;&amp;#123; &lt;span class=&quot;built_in&quot;&gt;cout&lt;/span&gt;&amp;lt;&amp;lt;&lt;span class=&quot;string&quot;&gt;&quot;Base f1(string)&quot;&lt;/span&gt;&amp;lt;&amp;lt;&lt;span class=&quot;built_in&quot;&gt;endl&lt;/span&gt;; &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;f1&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; a)&lt;/span&gt; &lt;/span&gt;&amp;#123; &lt;span class=&quot;built_in&quot;&gt;cout&lt;/span&gt;&amp;lt;&amp;lt;&lt;span class=&quot;string&quot;&gt;&quot;Base f1(int)&quot;&lt;/span&gt;&amp;lt;&amp;lt;&lt;span class=&quot;built_in&quot;&gt;endl&lt;/span&gt;; &amp;#125;   &lt;span class=&quot;comment&quot;&gt;//overload&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="技术开发" scheme="http://www.limerence2017.com/categories/tech/"/>
    
    
      <category term="C++" scheme="http://www.limerence2017.com/tags/C/"/>
    
  </entry>
  
</feed>
